@import "base/reset";
@import "base/colors";
@import "base/typography";
@import "abstracts/mixins";
@import "abstracts/themes";

// THEME MODULES:

// On each loop, assign these values to $theme and $map:
// module-name is a placeholder, should be replaced with any html-element: div, navbar, card, button etc - a container whose style we want to change.
// in html, we use naming like this :<div class="theme1 navbar">...</div>
// The & refers to parent selectors, and placing it after .#{$theme} tells Sass to output any parent selectors after the theme name:

// .module-name {
//   @each $theme, $map in $themes {
//     .#{$theme} & {
//       color: map-get($map, color);
//       background-color: map-get($map, background-color);
//       font-size: map-get($map, font-size);
//     }
//   }
// }

// .module-name {
//   h1 {
//     @each $theme, $map in $themes {
//       .#{$theme} & {
//         color: map-get($map, color);
//       }
//     }
//   }
// }

/* CSS */
// .theme1 .module-name h1 { color: red; }
// .theme2 .module-name h1 { color: orange; }
// .theme3 .module-name h1 { color: yellow; }
// .theme4 .module-name h1 { color: green; }
// .theme5 .module-name h1 { color: blue; }

// <body class="theme7">
// <button class="button nav-button theme7"><a href="index.html">Home</a></button>
// <button type="button" class="favorite-button button flex-item theme7">Add to favorites</button>

// PAGE-BACKGROUND:

// &.#{$theme} - current element
// .#{$theme} & { - parent element gets the class

body {
  @each $theme, $background in $backgrounds {
    &.#{$theme} {
      background-image: $background !important;
      // background: $background !important;
    }
  }
}

// body {
//   @each $theme, $background in $backgrounds {
//     &.#{$theme} {
//       background: map-get($backgrounds, background) !important;
//     }
//   }
// }

body {
  @each $theme, $properties in $fontColors {
    &.#{$theme} {
      color: map-get($properties, color) !important;
      text-shadow: map-get($properties, text-shadow) !important;
    }
  }
}

// FOR NAV-BUTTONS (html) AND ADD-BUTTONS (JS-file):

// .nav-button {
//   @each $theme, $map in $themes {
//     .#{$theme} & {
//       background-color: map-get($map, background-color);
//       color: map-get($map, color);
//     }
//   }
// }

.theme-button {
  @each $theme, $map in $themes {
    .#{$theme} & {
      background-color: map-get($map, background-color);
      background-image: map-get($map, background-image);
      color: map-get($map, color);
      border: map-get($map, border);
      box-shadow: map-get($map, box-shadow);
    }
  }
}

// Apply 1 scss-module to several classes (these classes/id-s/elements have to be all targeted in JS, in order to apply themes on them):
.nav-button,
.favorite-button,
#theme_color,
option {
  @extend .theme-button;
}

//ancor buttons have the same style like Select buttons:

button a {
  @each $theme, $map in $themes {
    .#{$theme} & {
      color: map-get($map, color);
    }
  }
}

// FOR REMOVE-BUTTONS (JS-file):

.remove-button {
  @each $theme, $map in $themes2 {
    .#{$theme} & {
      background-color: map-get($map, background-color);
      background-image: map-get($map, background-image);
      color: map-get($map, color);
      border: map-get($map, border);
      box-shadow: map-get($map, box-shadow);
    }
  }
}

// FORM AND TITLES:

.form-theme {
  @each $formTheme, $map in $formThemes {
    .#{$formTheme} & {
      background: map-get($map, background);
      background-color: map-get($map, background-color);
      color: map-get($map, color);
      box-shadow: map-get($map, box-shadow);
    }
  }
}

// .title-theme {
//   @extend .form-theme;
//   @each $titleTheme, $map in $titleThemes {
//     .#{$titleTheme} & {
//       background: map-get($map, background);
//     }
//   }
// }

.header-style {
  @each $headerTheme, $map in $headerThemes {
    .#{$headerTheme} & {
      background: map-get($map, background);
    }
  }
}

// Input background colors and fonts:

.input-color {
  @each $inputColor, $map in $inputColors {
    .#{$inputColor} & {
      background-color: map-get($map, background-color);
      color: map-get($map, color);
    }
  }
}

// font-color of the paragraph in song cards:

// .whiteParagraph, .whiteText {
//   @each $theme, $properties in $paragraphColors {
//     &.#{$theme} {
//       color: map-get($properties, color) !important;
//     }
//   }
// }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

body {
  // color: $fontColor1;
  // font-family: $sans-serif1;

  font-family: $quicksand;

  font-family: "Bruno Ace SC", sans-serif;

  font-family: "Rubik Mono One", monospace;

  font-family: "Permanent Marker", cursive;

  font-family: "Protest Guerrilla", sans-serif;

  font-family: "Montserrat", sans-serif;

  font-family: $sans-serif2;

  font-family: $poppins;

  // font-family: "Inter", sans-serif;

  // letter-spacing: 0.1rem;

  // font-family: "Viga", sans-serif;

  // font-family: "Bowlby One", sans-serif;

  // text-shadow: 2px 2px 4px $textShadowColor1;
  // background-image: url("../pictures/energy-violet.jpg");
  // background-image: $backgrounds;
  background-repeat: repeat;
  background-size: 100%;
}

h1 {
  font-size: 5rem;
  // letter-spacing: 0.3rem;
}

h1,
h3 {
  font-family: "Inter", sans-serif;
}

// linear-gradient - to top: 0deg, to bottom: 180deg, to left: 270deg, and to right: 90deg

// Navbar (header id="navigation" class="red"):

.red {
  @include flex-container();
  height: 120px;
}

// all children elements of header, which has class .red:
.red > * {
  padding: 0 5px 5px;
}

#navbar {
  flex-basis: 80%;
}

#navigation {
  @include navigation-position();
  @include navigation-design();
}

#top-icon {
  flex-basis: 5%;
}

#nav-title {
  font-family: $sans-serif2;
  color: $fontColor1;
  @include nav-title();
  flex-basis: 12%;
}

#nav-list {
  list-style-type: none;
  text-align: right;

  button {
    @include button-style();
    @include navbar-button();

    // &:last-child {
    //   margin-right: 50px;
    // }

    a {
      @include nav-ancor-text();
      text-decoration: none;
      // color: inherit;

      &:hover {
        @include button-hover();
      }
    }
  }
}

.dropdown-menu {
  display: none; /* Sakrij dropdown menu */
  position: absolute;
  top: 100%; /* Sets element right beneath the button */
  right: 20px;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 20px;
  // width: 50%;
  list-style: none;
  padding: 0;
  margin: 0;
  z-index: 1000; /* Osiguraj da se prikazuje iznad drugih elemenata */
  width: 100px;
}

/* Stil za prikaz dropdown menija */
.dropdown-menu.show {
  display: block;
}

.dropdown-menu li {
  padding: 2px;
  cursor: pointer;
  // border-bottom: 1px solid #ddd;
  transition: background-color 0.2s;
  font-size: 0.9rem;
}

.dropdown-menu li:hover {
  background-color: #ad307f;
}

select {
  @include button-style();
  @include navbar-button();
  @include submit-button();
  // -webkit-appearance: none;
  // -moz-appearance: none;
  display: inline-block;
  // appearance: none;
  border-top-left-radius: 40px;
  border-bottom-right-radius: 40px;
  // width: 15%;
  padding: 5px 20px;
  // background-color: $navButtonColor1;
  color: $fontColor1;
  font-weight: bold;
  // text-shadow: 2px 2px 4px $textShadowColor1;
  font-family: $sans-serif1;
  text-align: center;
  width: 18%;

  &:hover {
    @include button-hover();
  }
}

select {
  option {
    color: $fontColor1;
  }
}

.option {
  font-size: 0.9rem;
  background-color: $inputColor1;
  border-radius: 45px;
  // opacity: 0.8 !important;
}

#theme-color option {
  opacity: 0.8 !important;
}

#app-icon {
  text-align: center;
}

// h1,
// h2 {
//   margin-top: 10%;
// }

// form:

.flex-container {
  @include flex-container();
  align-items: center;
  width: 80%;
  margin: 3% 10%;
  height: 20%;
}
/* if height in vh: 20vh is used, it doesn't scale well, if too many elements added to the list (lower flex-container), 
    they won't fit anymore to a fixed vh-height, but will be overlapping into upper flex-container.
    Better to use percentage for containers inside the page, then the page will grow larger if needed - scrollable, 
    as long as alements are added to the list, but they will always fit into their container.
 */

#first-container {
  border-radius: 15px;
}

#form {
  @include form-design();
}

// .visible-title1,
// .visible-title2 {
//   padding: 0.1%;
//   margin: 5% 35%;
//   border-radius: 15px;
//   border-top: 1px solid rgba(128, 128, 128, 0.485);
//   border-left: 1px solid rgba(128, 128, 128, 0.478);
//   transition: transform 0.3s ease;
//   position: relative;
// }

// to have div transparent, but text inside of it fully visible - rgba with transparent effect:
// background: radial-gradient(at 25% 75%, #5d0e41, rgba(77, 148, 255, 0));

.visible-title1,
.visible-title2 {
  padding: 0.1%;
  // margin: 5% 35%;
  // border-radius: 15px;
  // border-top: 1px solid rgba(128, 128, 128, 0.485);
  // border-left: 1px solid rgba(128, 128, 128, 0.478);
  // transition: transform 0.3s ease;
  // position: relative;
}

// .visible-title1:hover,
// .visible-title2:hover,
// form:hover {
//   transform: translateY(-10px);
// }

#music-player {
  margin-top: 2%;
  width: 90%;
  height: 300px;
  // border-radius: 30px;

  border: 1px solid white;
}

.item-card {
  max-width: 60%;
  margin: auto;
  border-radius: 30px;
  margin-bottom: 50px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  transition: transform 0.3s ease;
  font-family: "Poppins", sans-serif !important;
}

.item-card:hover {
  transform: translateY(-10px);
}

.item-card2 {
  gap: 25%;
}

// label {
//   text-shadow: none !important;
// }

// .formViolet {
//   // background: radial-gradient(at 25% 75%, #5d0e41, rgba(77, 148, 255, 0));
//   background: radial-gradient(at 75% 25%, #450930, rgba(29, 54, 92, 0.551));
//   color: $fontColor1;
// }

// .formBlue {
//   background: radial-gradient(at 25% 75%, #0f4d5f, rgba(77, 148, 255, 0));
//   color: $fontColor1;
// }

// .formBlack {
//   background: rgba(0, 0, 0, 0.655);
//   color: $fontColor1;
// }

.shadow-text {
  font-size: 2rem;
}

input {
  @include input-field();

  &:hover {
    background-color: $hoverColor1;
    color: $textShadowColor1;
  }
}

button,
select {
  position: relative;
  overflow: hidden;

  border-radius: 45px;

  transition: transform 0.4s ease-in-out;
  // Elements button & select have relative positioning, which enables that pseudo-element ::after positions inside them with 'position: absolute'
  // overflow: hidden: enables that eny content which is outside of element border stays hidden - important for 'shine' efect because it passes over the element border.
  // transition: enables transformation on hover.

  // &:hover {
  //   transform: scale(1.05);
  //   box-shadow: 3px 3px 2px rgba(0, 0, 0, 0.4);
  // }

  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 200%;
    height: 100%;
    // background: rgba(255, 255, 255, 0.289);
    // transform: skewX(-20deg);
    // transition: left 0.1s ease-in-out;
    background: linear-gradient(
      to top,
      rgba(229, 172, 142, 0),
      rgba(255, 255, 255, 0.244) 50%,
      rgba(229, 172, 142, 0)
    );
    transform: rotateZ(320deg) translate(0em, 7.5em);
  }

  // content: '': creatse an empty ::after pseudo-element, to which we can provide some style.
  // position: absolute: Pseudo-element is positioned absolutely inside the parent element which is positioned relatively (button or select). So it may move freely inside the boderd of teh parent element.
  // top: 0, left: -100%: ::after element starts aoutside of the left side of parent element
  // width: 200%, height: 100%: Pseudo-element has double the element-width, so it may create effect of crossing over the whole element.
  // background: linear-gradient: defines gradient with light white line in the middle (rgba(255, 255, 255, 0.5)), simulating the shine.
  // transform: rotateZ(60deg) translate(-5em, 7.5em): Pseudo-element rotates for 60 degrees and moves, crosses diagnoally over the element.

  &:hover::after {
    animation: shine 1s forwards;
  }
}

// &:hover::after: on mouse-hover - the animation for pseudo-element ::after is activated.
// animation: shine 1s forwards: Animation named 'shine', lasts 1 sec and moves the ::after element across the button.

@keyframes shine {
  100% {
    transform: rotateZ(320deg) translate(1em, -9em);
  }
}

.input-button:hover {
  background-color: $hoverColor1;
  // color: $textShadowColor1;
  text-shadow: none;
}

p {
  padding: 2% 0;
}

/* input field for a numeric rate (smaller than others) */
#review {
  width: 7rem;
}

// submit-button:
button {
  @include submit-button();
  @include button-style();

  &:hover {
    @include button-hover();
  }
}

ul {
  list-style-type: none;
  padding-inline-start: 0;
  margin-top: 5%;
}

li {
  flex-basis: 80%;
}

.theme-select-btn {
  width: 16% !important;
}

.thin {
  color: rgba(130, 129, 129, 0.853);
  font-family: "Poppins", sans-serif !important;
  font-size: smaller;
}

.entry,
.artist,
.rating,
.time {
  font-size: smaller;
}

.whiteParagraph {
  // color: $fontColor1;
  @include list-paragraph();
}

.blackParagraph {
  color: $inputColor1;
  @include list-paragraph();
}

.whiteText {
  // color: $fontColor1;
  @include white-todos();
}

.blackText {
  // color: $textShadowColor1;
  @include white-todos();
}

#results {
  margin: 2% auto;
}

hr {
  width: 70%;
}

.favorite-button,
.remove-button {
  @include button-style();
  @include fav-and-remove-button();

  &:hover {
    @include button-hover();
  }
}

.removeButtonWater {
  background-color: $inputColor1;
}

#new-title {
  display: none;
}

@include columns();

.water {
  // for .select:
  background-color: $paragraphColor;
}

// MEDIA QUERIES:

@media (max-width: 1540px) {
  #nav-list button:last-child {
    margin-right: 150px;
  }

  #nav-list button {
    margin: 0 40px;
  }
}

@media (max-width: 1150px) {
  #nav-list button:last-child {
    margin-right: 50px;
  }

  #nav-list button {
    margin: 0 20px;
  }
}

@media (max-width: 1113px) {
  #nav-list button {
    width: 15%;
  }
}

@media (max-width: 1056px) {
  li {
    flex-basis: 90%;
  }
  li p {
    padding: 2% 0;
  }
}

@media (max-width: 989px) {
  // .red {
  //   height: 200px;
  // }
  #nav-title {
    font-size: 1.4rem;
  }
}

/* so that 'Rate (1-10)' doesn't break in 2 rows */
@media (max-width: 956px) {
  body {
    font-size: 1rem;
  }
  #review {
    width: 6rem;
  }
  #nav-list button,
  select {
    width: 10rem;
    height: 3rem;
  }
}

@media (max-width: 908px) {
  #nav-title {
    font-size: 1.4rem;
  }
  #nav-list button,
  select {
    width: 10rem;
    height: 3rem;
  }
}

@media (max-width: 900px) {
  #nav-list button,
  select {
    width: 10rem;
  }
}

@media (max-width: 880px) {
  #nav-list button:last-child {
    margin-right: 15px;
  }

  #nav-list button,
  select {
    margin: 0 15px;
    width: 10rem;
    height: 3rem;
  }

  #nav-title {
    font-size: 1.4rem;
  }
}

@media (max-width: 840px) {
  #nav-list button,
  select {
    margin: 0 10px;
    width: 10rem;
    height: 3rem;
  }

  #nav-title {
    font-size: 1.2rem;
    flex-basis: 90%;
  }

  .remove-button {
    margin: 3%;
  }
}

@media (max-width: 786px) {
  body {
    font-size: 1rem;
  }

  .flex-item {
    flex-basis: 70%;
    margin: 1% auto;
  }

  .flex-container {
    height: 45%;
    width: 85%;
    margin: 5% auto;
    align-content: center;
  }

  // .red {
  //   height: 200px;
  // }

  #nav-list button,
  select {
    width: 10rem;
  }

  #navbar {
    width: 100%;
  }

  button,
  input {
    width: 60%;
  }

  button {
    margin-top: 5%;
    margin-bottom: 10%;
    padding: 0%;
  }

  .remove-button {
    margin: 3%;
  }

  li p {
    padding: 2%;
    display: block;
  }

  #first-container {
    margin-bottom: 15%;
  }

  #empty {
    display: none;
  }
}

@media (max-width: 786px) {
  #nav-list {
    text-align: center;
  }
  #nav-list button {
    width: 6rem;
  }
  .red {
    height: 160px;
  }
}
